spring.application.name=commande-service
## Port du serveur
#server.port=8083
#
## Configuration de la base de données MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/commande_db?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=mi@nDR1s04
#
## Configuration de JPA/Hibernate
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#
## URLs des autres microservices (pour le développement local)
#service.produit.url=http://localhost:8082
#service.notification.url=http://localhost:8084

# Port du serveur (commenté pour la même raison que le service produit).
# server.port=8081

# ===============================================
# Configuration pour la connexion à Cloud SQL
# ===============================================

# L'URL est presque identique, seule la base de données cible change : 'commande_db'
spring.datasource.url=jdbc:mysql://google/commande_db?socketFactory=com.google.cloud.sql.mysql.SocketFactory&cloudSqlInstance=gcp-project-20250702:europe-west1:microservices-db
spring.datasource.username=root
spring.datasource.password=mi@nDR1s04

# ===============================================
# Configuration de JPA/Hibernate
# ===============================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true

# ===============================================
# Configuration de la communication inter-services
# ===============================================

# L'URL du service produit. En local, c'est localhost. Sur Cloud Run,
# cette valeur sera surchargée par une variable d'environnement lors du déploiement.
service.produit.url=http://localhost:8082

# Le nom du topic Pub/Sub à utiliser pour envoyer les notifications de commande.
# Cette approche est plus robuste que l'appel HTTP direct.
app.pubsub.topic-name=commandes-creees
